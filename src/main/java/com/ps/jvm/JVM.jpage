/**ClassLoader

	.Method Area
	.Heap
	.JVM Language Stacks
	.PC Registers
	.Native Method Stacks
	
Execution <--------> Native Method Interface <-----------> Native Method Libraries
Class Loader Subsystem

It is mainly responsible for three activities.
Loading
Linking
Initialization
Loading : 
	The Class loader reads the .class file, 
	generate the corresponding binary data and 
	save it in method area. 
	For each .class file, 

JVM stores following information in method area.
	Fully qualified name of the loaded class and its immediate parent class.
	Whether .class file is related to Class or Interface or Enum
	Modifier, Variables and Method information etc.
	After loading .class file, 
		JVM creates an object of type Class to represent this file in the heap memory. 
	Please note that this object is of type Class predefined in java.lang package. 
	This Class object can be used by the programmer for getting class level information like name of class, parent name, methods and variable information etc. 
	To get this object reference we can use getClass() method of Object class.
**/
JVM follow Delegation-Hierarchy principle to load classes. 
System class loader delegate load request to extension class loader and extension class loader delegate request to boot-strap class loader. 
If class found in boot-strap path, class is loaded otherwise request again transfers to extension class loader and then to system class loader.
At last if system class loader fails to load class, then we get run-time exception java.lang.ClassNotFoundException.





Application Class Loader ---> Extension Class Loader ---> Bootstrap Class Loader ---> Extension Class Loader ---> Application Class Loader

JVM Memory

Method area :In method area, all class level information like class name, immediate parent class name, methods and variables information etc. are stored, including static variables. There is only one method area per JVM, and it is a shared resource.
Heap area :Information of all objects is stored in heap area. There is also one Heap Area per JVM. It is also a shared resource.

Stack area :For every thread, JVM create one run-time stack which is stored here. Every block of this stack is called activation record/stack frame which store methods calls. All local variables of that method are stored in their corresponding frame. After a thread terminate, itâ€™s run-time stack will be destroyed by JVM. It is not a shared resource.

PC Registers :Store address of current execution instruction of a thread. Obviously each thread has separate PC Registers.

Native method stacks :For every thread, separate native stack is created. It stores native method information.

Execution Engine

Execution engine execute the .class (bytecode). It reads the byte-code line by line, use data and information present in various memory area and execute instructions. It can be classified in three parts :-
Interpreter : It interprets the bytecode line by line and then executes. The disadvantage here is that when one method is called multiple times, every time interpretation is required.
Just-In-Time Compiler(JIT) : It is used to increase efficiency of interpreter.It compiles the entire bytecode and changes it to native code so whenever interpreter see repeated method calls,JIT provide direct native code for that part so re-interpretation is not required,thus efficiency is improved.
Garbage Collector : It destroy un-referenced objects.For more on Garbage Collector,refer Garbage Collector.
Java Native Interface (JNI) :

It is a interface which interacts with the Native Method Libraries and provides the native libraries(C, C++) required for the execution. It enables JVM to call C/C++ libraries and to be called by C/C++ libraries which may be specific to hardware.
Native Method Libraries :

It is a collection of the Native Libraries(C, C++) which are required by the Execution Engine.
